import streamlit as st
import requests
import json
import time
from datetime import datetime
import random

st.set_page_config(page_title="Grok Gratis", page_icon="üî•", layout="wide")
st.title("ü¶ä Grok Gratis - Asistente Avanzado")
st.markdown("**Versi√≥n gratuita con personalidad √∫nica y m√∫ltiples funciones**")

# Configuraci√≥n avanzada
headers = {"Authorization": f"Bearer {st.secrets['HUGGINGFACE_TOKEN']}"}

class PersonalidadGrok:
    """Sistema de personalidad similar a Grok"""
    
    def __init__(self):
        self.estilos = {
            'directo': [
                "Vamos al grano...",
                "Sin rodeos:",
                "La verdad es:",
                "Te lo digo claro:"
            ],
            'sarcastico': [
                "Oh, otra pregunta existencial...",
                "Qu√© sorpresa, alguien m√°s preguntando esto...",
                "Brillante pregunta, nunca la hab√≠a escuchado antes...",
                "Vaya, esto es completamente nuevo para m√≠..."
            ],
            'tecnico': [
                "Analizando t√©cnicamente:",
                "Desde una perspectiva t√©cnica:",
                "Desglosando el problema:",
                "En t√©rminos de implementaci√≥n:"
            ],
            'creativo': [
                "Imaginemos que...",
                "Desde un √°ngulo diferente:",
                "Qu√© tal si pensamos en...",
                "Una idea loca ser√≠a..."
            ]
        }
    
    def obtener_estilo(self, mensaje):
        mensaje = mensaje.lower()
        if any(palabra in mensaje for palabra in ['c√≥mo', 'how', 'funciona', 't√©cnic']):
            return 'tecnico'
        elif any(palabra in mensaje for palabra in ['idea', 'creat', 'imagin']):
            return 'creativo'
        elif any(palabra in mensaje for palabra in ['?', 'por qu√©', 'why']):
            return 'sarcastico'
        else:
            return 'directo'

def grok_avanzado(mensaje, historial):
    """Motor avanzado de Grok gratuito"""
    
    personalidad = PersonalidadGrok()
    estilo = personalidad.obtener_estilo(mensaje)
    estilo_texto = random.choice(personalidad.estilos[estilo])
    
    # MODELOS AVANZADOS GRATIS
    modelos_avanzados = [
        "https://api-inference.huggingface.co/models/microsoft/DialoGPT-large",
        "https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill",
        "https://api-inference.huggingface.co/models/google/flan-t5-large"
    ]
    
    # Construir prompt con personalidad
    contexto = "\n".join([f"Usuario: {msg['content']}" for msg in historial[-3:]])
    prompt_avanzado = f"""
    Eres Grok, un asistente directo, sarc√°stico pero √∫til. Responde en el estilo: {estilo}
    
    Contexto anterior:
    {contexto}
    
    Usuario: {mensaje}
    
    Grok ({estilo}): {estilo_texto}
    """
    
    # Intentar con modelos avanzados
    for modelo_url in modelos_avanzados:
        try:
            response = requests.post(
                modelo_url,
                headers=headers,
                json={
                    "inputs": prompt_avanzado,
                    "parameters": {
                        "max_length": 200,
                        "temperature": 0.8,
                        "do_sample": True
                    }
                },
                timeout=10
            )
            
            if response.status_code == 200:
                resultado = response.json()
                if resultado and isinstance(resultado, list) and len(resultado) > 0:
                    texto = resultado[0].get('generated_text', '')
                    if texto and len(texto) > 20:
                        # Extraer solo la respuesta de Grok
                        if "Grok (" in texto:
                            texto = texto.split("Grok (")[-1].split("):")[-1].strip()
                        return f"**{estilo_texto}** {texto}"
            time.sleep(1)
        except:
            continue
    
    # RESPUESTAS AVANZADAS POR DEFECTO
    respuestas_avanzadas = {
        'directo': [
            f"**{estilo_texto}** La respuesta directa es que necesitas ser m√°s espec√≠fico para poder ayudarte mejor.",
            f"**{estilo_texto}** Sin rodeos: esto requiere m√°s contexto de tu parte.",
            f"**{estilo_texto}** La verdad es que podr√≠a darte una respuesta gen√©rica, pero prefiero que seas m√°s espec√≠fico."
        ],
        'sarcastico': [
            f"**{estilo_texto}** Oh, claro, porque soy adivino y s√© exactamente qu√© quieres sin que lo expliques...",
            f"**{estilo_texto}** Qu√© pregunta tan espec√≠fica, casi tanto como 'cosas' o 'algo'...",
            f"**{estilo_texto}** Brillante, otra pregunta que cubre todos los temas posibles simult√°neamente."
        ],
        'tecnico': [
            f"**{estilo_texto}** T√©cnicamente, para darte una respuesta precisa necesito m√°s par√°metros espec√≠ficos.",
            f"**{estilo_texto}** Desde una perspectiva t√©cnica, el problema necesita mejor definici√≥n.",
            f"**{estilo_texto}** Analizando tu consulta: requiere desglose en componentes m√°s espec√≠ficos."
        ],
        'creativo': [
            f"**{estilo_texto}** Imagina que pudiera leer mentes... pero como no puedo, necesito m√°s detalles.",
            f"**{estilo_texto}** Una idea creativa ser√≠a que me des m√°s contexto para poder ayudarte mejor.",
            f"**{estilo_texto}** Desde un √°ngulo diferente: ¬øqu√© tal si especificas exactamente qu√© necesitas?"
        ]
    }
    
    return random.choice(respuestas_avanzadas[estilo])

# SISTEMA DE M√öLTIPLES FUNCIONES
def modo_programacion(codigo):
    """Modo especializado en programaci√≥n"""
    respuestas_codigo = [
        "Analizando tu c√≥digo... Veo que podr√≠as optimizar eso.",
        "Interesante enfoque. ¬øHas considerado usar...?",
        "Como Grok t√©cnico: eso funciona, pero hay una forma m√°s elegante.",
        "Vamos al grano: tu c√≥digo necesita refactorizaci√≥n."
    ]
    return random.choice(respuestas_codigo)

def modo_investigacion(tema):
    """Modo de investigaci√≥n r√°pida"""
    return f"**Investigando {tema}...** Basado en conocimiento general: esto es un √°rea compleja que requiere m√°s especificidad."

def modo_creativo(idea):
    """Modo de lluvia de ideas"""
    ideas_creativas = [
        "Qu√© tal si... revolucionas el enfoque completamente?",
        "Una idea loca: combina eso con IA generativa.",
        "Desde la perspectiva de Grok: eso es muy convencional. S√© m√°s audaz.",
        "Imaginemos que el dinero no es problema... ¬øentonces qu√© har√≠as?"
    ]
    return f"**üí° Idea Grok:** {random.choice(ideas_creativas)}"

# INTERFAZ AVANZADA DE GROK
st.sidebar.title("ü¶ä Panel de Control Grok")
modo = st.sidebar.selectbox(
    "Selecciona Modo:",
    ["General", "Programaci√≥n", "Investigaci√≥n", "Creativo", "Sarc√°stico"]
)

st.sidebar.markdown("---")
st.sidebar.write("**üìä Estad√≠sticas en Tiempo Real:**")
if "estadisticas" not in st.session_state:
    st.session_state.estadisticas = {"mensajes": 0, "inicio": datetime.now()}

st.sidebar.write(f"**Mensajes:** {st.session_state.estadisticas['mensajes']}")
st.sidebar.write(f"**Tiempo activo:** {(datetime.now() - st.session_state.estadisticas['inicio']).seconds // 60} min")

# HISTORIAL AVANZADO
if "historial_grok" not in st.session_state:
    st.session_state.historial_grok = []

# CHAT PRINCIPAL
st.header("üí¨ Chat Grok Avanzado")

for mensaje in st.session_state.historial_grok:
    with st.chat_message(mensaje["role"]):
        st.markdown(mensaje["content"])

# INPUT INTELIGENTE
if pregunta := st.chat_input(f"Escribe en modo {modo}..."):
    # Actualizar estad√≠sticas
    st.session_state.estadisticas["mensajes"] += 1
    
    # Agregar pregunta
    st.session_state.historial_grok.append({"role": "user", "content": pregunta})
    
    # PROCESAR SEG√öN MODO
    with st.chat_message("assistant"):
        with st.spinner(f"ü¶ä Grok pensando en modo {modo}..."):
            if modo == "Programaci√≥n":
                respuesta = modo_programacion(pregunta)
            elif modo == "Investigaci√≥n":
                respuesta = modo_investigacion(pregunta)
            elif modo == "Creativo":
                respuesta = modo_creativo(pregunta)
            elif modo == "Sarc√°stico":
                # Forzar modo sarc√°stico
                temp_personalidad = PersonalidadGrok()
                estilo_texto = random.choice(temp_personalidad.estilos['sarcastico'])
                respuesta = f"**{estilo_texto}** {random.choice(['Oh, genial, m√°s trabajo...', 'Qu√© sorpresa, alguien necesita ayuda...', 'Vaya, esto es completamente inesperado...'])}"
            else:
                respuesta = grok_avanzado(pregunta, st.session_state.historial_grok)
        
        st.markdown(respuesta)
        st.session_state.historial_grok.append({"role": "assistant", "content": respuesta})

# PIE DE P√ÅGINA AVANZADO
st.markdown("---")
col1, col2, col3 = st.columns(3)
with col1:
    st.write("**‚ö° Caracter√≠sticas:**")
    st.write("‚Ä¢ Personalidad adaptable")
    st.write("‚Ä¢ M√∫ltiples modos")
    st.write("‚Ä¢ Respuestas directas")
with col2:
    st.write("**üéØ Especialidades:**")
    st.write("‚Ä¢ Programaci√≥n")
    st.write("‚Ä¢ Investigaci√≥n") 
    st.write("‚Ä¢ Creatividad")
with col3:
    st.write("**üÜì Gratis Para Siempre**")
    st.write("‚Ä¢ Sin l√≠mites")
    st.write("‚Ä¢ Sin publicidad")
    st.write("‚Ä¢ Open Source")
